#include <iostream>
#include <string>
#include <iomanip>
#include <cstdlib>
#include <ctime>
#include "graphicFcts.h"

using namespace std;

const int row = 20;
const int col = 20;
string room[col][row];

int currentRow = 1;
int currentCol = 1;

char movement = 'X';

int randomTrapGeneratorRow;
int randomTrapGeneratorCol;
int randomMonsterGeneratorRow;
int randomMonsterGeneratorCol;

int gogglesPositionRow;
int gogglesPositionCol;

bool gameWon = false;
bool validMove = true;
bool startOfGame = true;

bool gogglesFound = false;
bool trapDetector = false;

bool hitTrap = false;
bool hitMonster = false;

int changeTraps = 0;

int healthPoints = 100;



void printInstructions(){
    
    string input;
    
    cout << setw(300) << "D U N G E O N  M A S T E R \n" << endl;
    cout << "\nWelcome to Dungeon Master. Your goal is to reach the bottom right corner to escape the dungeon. \n" << "Be careful, you might encounter traps and monsters on the way and you will have to defend yourself." << endl;
    cout << "If you meet a trap, you will have 3 chances to find the random number between 1 and 10 generated by the dungeon." << endl;
    cout << "If you meet a monster, you'll have to play a rock-paper-scissors game. Press R for rock, P for paper and S for scissors." << endl;
    cout << "If you lose the trap challenge, you'll be docked 20HP. If you lose against the monster, you'll be docked 30HP. You start with 100HP." << endl;
    
    cout << "\nThe Master is playful. He changes the trap positions often and monsters move fast. Take that into consideration." << endl;
    
    cout << "\nTip: The monsters like to attack as a group in an orderly fashion.";
    
    cout << "\nThis is your character: ᗤ \n" << endl;
    cout << "You might encouter different items during the game: " << endl;
    cout << "\t♥ - The Potion of Ressurection. If you die, it will ressurect you with 10 HP." << endl;
    cout << "\t⎌ - The Master's Goggles. If you are close to encountering a trap or monster, it will signal you with the following symbol: ⚠︎. They only work for a limited amount of time however. " << endl;
    cout << "\t⚒︎ - The Thunder Hammer. You get an extra chance every time you face a monster." << endl;
    
    cout << "\nPress any key when you're ready to start" << endl;
    cin >> input;
    cout << "\n \n \n" << endl;
    
    
}

void drawRoom(){
    
    for (int i=0; i<row; i++){
        for (int j=0; j<col; j++){
            
            
            
            if(i == currentRow && j == currentCol){
                if (movement == 'A') {
                    room[i][j] = "ᗤ";
                    
                    
                }
                else if(movement == 'S'){
                    room[i][j] = "ᗣ";
                    if(i == row - 2 && j == col - 2){
                        gameWon = true;
                    }
                }
                else if(movement == 'W'){
                    room[i][j] = "ᗢ";
                    
                }
                else{
                    room[i][j] = "ᗧ";
                }
                if(i == row - 2 && j == col - 2){
                    gameWon = true;
                }
                
            }
            
            
            else if(i == 0){
                room [i][j] = "-";
            }
            else if(j == col-1 && i < row - 2){
                room[i][j] = "|";
            }
            else if(i == row-1){
                room[i][j] = "-";
            }
            else if(j == 0){
                room[i][j] = "|";
            }
            else{
                room[i][j] = ".";
            }
            
            
            
            
            cout << room[i][j];
            if(j == col-1){
                if(i==1){
                    cout << "\t \t \t \t  HP: " << healthPoints;
                }
                if(gogglesFound == true){
                    if(i == 2){
                        cout << "\t \t \t \t  ITEM: ⎌";
                    }
                     if(i == 3 && trapDetector == true){
                        cout << "\t \t \t \t  DETECTOR: ⚠︎";
                         trapDetector = false;

                    }
                }
              
                if(hitTrap == true){
                    if(i == 10){
                        cout << "\t \tTrap! Guess the number between 0 and 10.";
                    }
                }
                else if(hitMonster == true){
                    if(i == 10){
                        cout << "\t \tMonster! Rock, paper or scissors?";
                    }
                }
                
            }
            if(gameWon == true){
                cout << "\n\nGAME WON!" << endl;
                exit(0);
            }
            
            
        }
        cout << "\n";
    }
    
    if(hitTrap == true){
        int computerNumber = rand() % 10 + 1;
        int trials = 3;
        int playerGuess = 0;
        cin >> playerGuess;
        
        while(!cin) // or if(cin.fail())
        {
            // user didn't input a number
            cin.clear(); // reset failbit
            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); //skip bad input
            // next, request user reinput
            cout << "Enter a number." << endl;
            cin >> playerGuess;
        }
        //Check if input is in the range.
        while(playerGuess < 1 || playerGuess > 10){
            cout << "Enter a valid value." << endl;
            cin >> playerGuess;
        }
        
        while(playerGuess != computerNumber && trials > 1){
            trials--;
            cout << "Try again." << endl;
            cin >> playerGuess;
        }
        
        if(playerGuess == computerNumber){
            cout << "lucki moderfucker" << endl;
        }
        else{
            healthPoints -=20;
        }
        
        
        
    }
    
    
    
}


void drawPlayer(){
    
    if(startOfGame == true){
        currentRow = 1;
        currentCol = 1;
        startOfGame = false;
    }
    else{
        cin.sync();
        cin >> movement;
        cin.ignore();
        
        //In this blocks, I use validMove to confirm the call of drawRoom().
        //If the player is trying to get out of the borders, validMove is set to false and we replace the player to its initial position before the move.
        //I am conscious that deleting the validMove part as such would work too: (e.g.: movement = S)
        /* if(currentRow > row - 1){
         currentRow = currentRow - 1;
         }
         */
        //However, it would still call drawRoom() even if it doesn't display the move. drawRoom() is a fct running in O(n^2) and for efficiency purposes, it's better to check if we can avoid calling it.
        
        if(movement == 'S'){
            currentRow = currentRow + 1;
            if(currentRow < row - 1){
                validMove = true;
            }
            else{
                validMove = false;
                currentRow = currentRow - 1;
            }
        }
        else if(movement == 'W'){
            currentRow = currentRow - 1;
            if(currentRow > 0){
                validMove = true;
            }
            else{
                validMove = false;
                currentRow = currentRow + 1;
            }
        }
        else if(movement == 'D'){
            currentCol = currentCol + 1;
            if(currentCol < col - 1){
                validMove = true;
            }
            else{
                validMove = false;
                currentCol = currentCol - 1;
            }
        }
        else if(movement == 'A'){
            currentCol = currentCol - 1;
            if(currentCol > 0){
                validMove = true;
            }
            else{
                validMove = false;
                currentCol = currentCol +1;
            }
        }
        
    }
    
    room[currentCol][currentRow] = "ᗤ";
    
    if(validMove == true){
        drawRoom();
    }
    
}


void checkTrap(){
    
    srand(time(NULL));

    
    if(changeTraps % 7 == 0 || hitMonster == true || hitTrap == true || startOfGame == true){
        hitMonster = false;
        hitTrap = false;
    //Print position of current trap.
    randomTrapGeneratorRow = rand() % row + 1;
    randomTrapGeneratorCol = rand() % col + 1;
    randomMonsterGeneratorRow = rand() % row + 1;
    randomMonsterGeneratorCol = rand() % col + 1;
    }
    
    //GOTTA WORK ON THIS
    if ((currentRow + 1) % randomTrapGeneratorRow == 0 || (currentRow - 1) % randomTrapGeneratorRow == 0 || (currentCol + 1) % randomTrapGeneratorCol == 0 || (currentCol - 1) % randomTrapGeneratorCol == 0){
//        cout << "TRAP NEARBY" << endl;
        trapDetector = true;
    }

    if (currentRow % randomTrapGeneratorRow == 0 || currentCol % randomTrapGeneratorCol == 0){
        if(changeTraps % 2 == 0){
            cout << "MONSTER!" << endl;
            hitMonster = true;
        }
        else{
            cout << "TRAP!" << endl;
            hitTrap = true;
        }
        //healthPoints -= 20;
        
    }
    
//    else if(currentRow % randomMonsterGeneratorRow == 0 || currentCol % randomMonsterGeneratorCol == 0){
//        cout << "MONSTAR" << endl;
//        hitMonster = true;
//        //healthPoints -= 30;
//    }
    
//    cout << "TRAP ROW" << randomTrapGeneratorRow << endl;
//    cout << "TRAP COL" << randomTrapGeneratorCol << endl;

    changeTraps++;
    
}

void checkItem(){
    gogglesPositionRow = 2;
    gogglesPositionCol = 2;
    
    if(currentRow == gogglesPositionRow && currentCol == gogglesPositionCol){
       // cout << "GOGLES" << endl;
        gogglesFound = true;
    }
    
}

