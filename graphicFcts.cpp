#include <iostream>
#include <string>
#include <iomanip>
#include <cstdlib>
#include <ctime>
#include "graphicFcts.h"

using namespace std;

const int row = 20;
const int col = 20;
string room[col][row];

int currentRow = 1;
int currentCol = 1;

string movInput = "X";
string movement = "X";

int randomTrapGeneratorRow;
int randomTrapGeneratorCol;
int randomMonsterGeneratorRow;
int randomMonsterGeneratorCol;

int gogglesRow;
int gogglesCol;
int potionRow;
int potionCol;
int hammerCol;
int hammerRow;

bool gogglesFound = false;
bool potionFound = false;
bool hammerFound = false;

bool nearbyTrap = false;

bool secondAttack = true;
bool secondAttackOccurred = false;
int secondAtkCount = 1;

bool gameWon = false;
bool dead = false;
bool validMove = true;
bool startOfGame = true;


bool hitTrap = false;
bool hitMonster = false;

int changeTraps = 0;

int healthPoints = 100;



void printInstructions(){
    
    string input;
    
    cout << setw(300) << "D U N G E O N  M A S T E R \n" << endl;
    cout << "\nWelcome to Dungeon Master. Your goal is to reach the bottom right corner to escape the dungeon. \n" << endl;
    cout << "If you meet a trap, you will have 3 chances to find the random number from 0 to 9 generated by the dungeon." << endl;
    cout << "If you meet a monster, you'll have to play a rock-paper-scissors game. " << endl;
    
    cout << "If you lose the trap challenge, you'll be docked 10HP. If you lose against the monster, you'll be docked 30HP." << endl;
    
    cout << "\nThe Master is playful. He changes the trap positions often and monsters move fast. Take that into consideration." << endl;
    
    cout << "\nThis is your character: ᗤ. \n" << endl;
    
    cout << "You might encouter different items during the game: " << endl;
    cout << "\t♥ - The Potion of Ressurection. If you die, it will ressurect you with 40 HP." << endl;
    cout << "\t⎌ - The Master's Goggles. If a trap is in front of you, it will signal you with the following symbol: ⚠︎." << endl;
    cout << "\t⚒︎ - The Thunder Hammer. You get an extra chance every time you face a monster." << endl;
    
    cout << "\nPress any key when you're ready to start" << endl;
    cin >> input;
    drawRoom();
    // cout << "\n \n \n" << endl;
    
    
}

void drawRoom(){
    
    for (int i=0; i<row; i++){
        for (int j=0; j<col; j++){
            
            if(startOfGame == true){
                room[1][1] = "ᗧ";
            }
            
            if(i == currentRow && j == currentCol){
                
                if (movement == "A" || movement == "a") {
                    room[i][j] = "ᗤ";
                }
                
                else if(movement == "S" || movement == "s"){
                    room[i][j] = "ᗣ";
                    if(i == row - 2 && j == col - 2){
                        gameWon = true;
                    }
                }
                
                else if(movement == "W" || movement == "w"){
                    room[i][j] = "ᗢ";
                }
                
                else if (movement == "D" || movement == "d"){
                    room[i][j] = "ᗧ";
                }
                
                if(i == row - 2 && j == col - 2){
                    gameWon = true;
                }
                
            }
            
            
            else if(i == 0){
                room [i][j] = "-";
            }
            else if(j == col-1 && i < row - 2){
                room[i][j] = "|";
            }
            else if(i == row-1){
                room[i][j] = "-";
            }
            else if(j == 0){
                room[i][j] = "|";
            }
            else{
                room[i][j] = ".";
            }
            
            
            cout << room[i][j];
            
            
           
            
            if(j == col-1){
                if(i==1){
                    cout << "\t \t \t \t  HP: " << healthPoints;
                }
                
                if(gogglesFound == true){
                    if(i == 2){
                        cout << "\t \t \t \t  ITEM: ⎌";
                    }
                    //if(nearbyTrap == true){
                    if(randomMonsterGeneratorRow != 0 && randomTrapGeneratorCol != 0){
                    
                    if(((movement == "S" || movement == "s") && (currentRow+1) % randomTrapGeneratorRow == 0 && currentCol % randomTrapGeneratorCol == 0) ||
                       ((movement == "W" || movement == "w") && (currentRow-1) % randomTrapGeneratorRow == 0 && currentCol % randomTrapGeneratorCol == 0) ||
                       ((movement == "D" || movement == "d") && (currentRow) % randomTrapGeneratorRow == 0 && (currentCol+1) % randomTrapGeneratorCol == 0) ||
                       ((movement == "A" || movement == "a") && (currentRow) % randomTrapGeneratorRow == 0 && (currentCol-1) % randomTrapGeneratorCol == 0)){
                        if(i == 5){
                            cout <<"\t \t \t \t  DANGER: ⚠︎";
                        }
                    }
                    }
                }
                
                
                if(potionFound == true){
                    if (i == 3){
                        cout << "\t \t \t \t  ITEM: ♥";
                    }
                }
                
                if(hammerFound == true){
                    if(i == 4){
                        cout << "\t \t \t \t  ITEM: ⚒︎";
                    }
                }
                
                
                if(hitTrap == true){
                    if(i == 10){
                        cout << "\t \tTrap! Guess the number in 0-9.";
                    }
                }
                
                else if(hitMonster == true){
                    if(i == 10){
                        cout << "\t \tMonster! Rock (1), paper (2) or scissors (3)?";
                    }
                }
                
                if(i == 13){
                    cout << "\t\tNote: traps trigger when foot is taken off...";
                }
                
            }
            
            if(gameWon == true){
                cout << "\n\nGAME WON!" << endl;
                exit(0);
            }
            if(dead == true){
                cout << "\n\nGAME OVER!" << endl;
                exit(0);
            }
           
            
        }
        cout << "\n";
    }
    
    if(hitTrap == true){
        trapAction();
        cin.clear(); // reset failbit
        cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); //skip bad input
        // next, request user reinput
        cin.sync();
    }
    
    if(hitMonster == true){
        monsterAction();
    }
    
    
    
}


void drawPlayer(){
    
    if(startOfGame == true){
        currentRow = 1;
        currentCol = 1;
        startOfGame = false;
    }
    
    if(healthPoints <= 0){
        if(potionFound == false){
            dead = true;
        }
        else if(potionFound == true){
            potion();
            potionFound = false;
        }
    }
    
    
    
    else{
        
        cin.sync();
        cin >> movInput;
        cin.ignore();
        
        movement = movInput.substr(0, 1);
        
        if(movement == "S" || movement == "s"){
            currentRow = currentRow + 1;
            if(currentRow < row - 1){
                validMove = true;
            }
            else{
                validMove = false;
                currentRow = currentRow - 1;
            }
        }
        else if(movement == "W" || movement == "w"){
            currentRow = currentRow - 1;
            if(currentRow > 0){
                validMove = true;
            }
            else{
                validMove = false;
                currentRow = currentRow + 1;
            }
        }
        else if(movement == "D" || movement == "d"){
            currentCol = currentCol + 1;
            if(currentCol < col - 1){
                validMove = true;
            }
            else{
                validMove = false;
                currentCol = currentCol - 1;
            }
        }
        else if(movement == "A" || movement == "a"){
            currentCol = currentCol - 1;
            if(currentCol > 0){
                validMove = true;
            }
            else{
                validMove = false;
                currentCol = currentCol +1;
            }
        }
        
    }
    
    room[currentCol][currentRow] = "ᗤ";
    
   
//    if((currentRow) % randomTrapGeneratorRow == 0 && (currentCol+1) % randomTrapGeneratorCol == 0){
//        nearbyTrap = true;
//    }
//
    if(validMove == true){
        drawRoom();
    }
    
}


void checkTrap(){
    
    srand(time(NULL));
    
    if(changeTraps % 10 == 0 || hitTrap == true || hitMonster == true || startOfGame == true){
        hitMonster = false;
        hitTrap = false;
        nearbyTrap = false;
        //Print position of current trap.
        randomTrapGeneratorRow = rand() % (row/5 - 1) + 2;
        randomTrapGeneratorCol = rand() % (col/5 - 1) + 2;
        randomMonsterGeneratorRow = rand() % (row/5 - 1) + 2;
        randomMonsterGeneratorCol = rand() % (col/5 - 1) + 2;
    }
//
//        cout << "TRAP: R = " << randomTrapGeneratorRow << " C = " << randomTrapGeneratorCol << endl;
//        cout << "MONSTER: R = " << randomMonsterGeneratorRow << " C = " << randomMonsterGeneratorCol << endl;
//        cout << "CURRENT: R = " << currentRow << " C = " << currentCol << endl;
//
  
    
    if (currentRow % randomTrapGeneratorRow == 0 && currentCol % randomTrapGeneratorCol == 0){
        hitTrap = true;
    }
     else if(currentRow % randomMonsterGeneratorRow == 0 && currentCol % randomMonsterGeneratorCol == 0){
        hitMonster = true;
     }
    
    changeTraps++;
    
}

void checkItem(){
 
    if(currentRow == gogglesRow && currentCol == gogglesCol){
        gogglesFound = true;
    }
    else if(currentRow == potionRow && currentCol == gogglesCol){
        potionFound = true;
    }
    else if(currentRow == hammerRow && currentCol == hammerCol){
        hammerFound = true;
    }
    
   // cout << "row " << gogglesRow << " col " << gogglesCol << endl;
    
}

void generateItems(){
    
    srand(time(NULL));
    
        gogglesRow = rand() % (row/2) + 1;
        gogglesCol = rand() % (col/2) + 1;
        potionRow = rand() % (row/2)+ 1;
        potionCol = rand() % (col/2) + 1;
        hammerRow = rand() % (row/2) + 1;
        hammerCol = rand() % (col/2) + 1;

    
}


void potion(){
    if(potionFound == true && healthPoints <= 0){
        healthPoints = 40;
    }
    
}

void trapAction(){
    
    int computerNumber = rand() % 9 + 1;
    int trials = 3;
    int playerGuess = -1;
    cin >> playerGuess;
    
    while(!cin)
    {
        // user didn't input a number
        cin.clear(); // reset failbit
        cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); //skip bad input
        // next, request user reinput
        cout << "Enter a number." << endl;
        cin >> playerGuess;
    }
    
    while(trials > 1 && playerGuess != computerNumber){
        
        cout << "Try again." << endl;
        cin >> playerGuess;
        
        while(!cin)
        {
            // user didn't input a number
            cin.clear(); // reset failbit
            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); //skip bad input
            // next, request user reinput
            cout << "Enter a number." << endl;
            cin >> playerGuess;
        }
        
        //Check if input is in the range.
        while(playerGuess < 0 || playerGuess > 9){
            cout << "Enter a valid value." << endl;
            cin >> playerGuess;
        }
        
        trials--;
        
        
    }
    if(playerGuess != computerNumber){
        cout << "OUCH, you are hit by a hidden trap! Keep moving!" << endl;
        healthPoints -= 20;
    }
    else{
        cout << "You suddenly notice the suspicious trap on the floor and dodge it." << endl;
    }
    
    
}

void monsterAction(){
    int computerChoice = rand() % 3 + 1;
    int playerGuess = 0;
    secondAttackOccurred = false;
    
    while(true){
        cin >> playerGuess;

        while(!cin) // or if(cin.fail())
        {
            // user didn't input a number
            cin.clear(); // reset failbit
            cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); //skip bad input
            // next, request user reinput
            cout << "Enter a number." << endl;
            cin >> playerGuess;
        }
        //Check if input is in the range.
        while(playerGuess < 1 || playerGuess > 3){
            cout << "Enter a valid value." << endl;
            cin >> playerGuess;
        }
        
        
        if(playerGuess == 1 && computerChoice == 3){
            cout << "Monster attacks with scissors" << endl;
            cout << "The monster is stunned, run!" << endl;
            //        secondAttack = false;
            break;
        }
        
        else if(playerGuess == 2 && computerChoice == 1){
            cout << "Monster attacks with rock" << endl;
            cout << "The monster is stunned, run!" << endl;
            //        secondAttack = false;
            break;
        }
        
        else if(playerGuess == 3 && computerChoice == 2){
            cout << "Monster attacks with paper" << endl;
            cout << "The monster is stunned, run!" << endl;
            //        secondAttack = false;
            break;
        }
        else{
            if(hammerFound == false){
                cout << "The monster attacked you by surprise, you're hurt. Run away!" << endl;
                healthPoints -= 30;
                //        secondAttack = false;
                break;
            }
            else if(hammerFound == true){
                if(secondAttackOccurred == false){
                    cout << "You're able to hit the monster again with your hammer. Rock, paper, or scissors?" << endl;
                    secondAttackOccurred = true;
                    continue;
                }
                else{
                    cout << "The monster attacked you by surprise, you're hurt. Run away!" << endl;
                    healthPoints -= 30;
                    break;
                }
            }
        }
        

    }
    
    
}




