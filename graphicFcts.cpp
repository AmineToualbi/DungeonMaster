#include <iostream>
#include <string>
#include <iomanip>
#include <cstdlib>
#include <ctime>

using namespace std;

const int row = 20;
const int col = 30;
string room[col][row];

int currentRow = 1;
int currentCol = 1;

char movement = 'X';

int randomTrapGeneratorRow;
int randomTrapGeneratorCol;
int randomMonsterGeneratorRow;
int randomMonsterGeneratorCol;

bool gameWon = false;
bool validMove = true;
bool startOfGame = true;

void printInstructions(){
    
    string input;
    
    cout << setw(300) << "D U N G E O N  M A S T E R \n" << endl;
    cout << "\nWelcome to Dungeon Master. Your goal is to reach the bottom right corner to escape the dungeon. \n" << "Be careful, you might encounter traps and monsters on the way and you will have to defend yourself." << endl;
    cout << "If you meet a trap, represented as a T on the board, you will have 3 chances to find the random number between 1 and 10 generated by the dungeon." << endl;
    cout << "If you meet a monster, you'll have to play a rock-paper-scissors game. Press R for rock, P for paper and S for scissors." << endl;
    cout << "If you lose the trap challenge, you'll be docked 20HP. If you lose against the monster, you'll be docked 30HP. You start with 100HP." << endl;
    cout << "Your character is represented as a ᗤ \n" << endl;
    cout << "Press any key when you're ready to start" << endl;
    cin >> input;
    cout << "\n \n \n" << endl;
    
    
}

void drawRoom(){
    
    for (int i=0; i<row; i++){
        for (int j=0; j<col; j++){
            
            
            
            if(i == currentRow && j == currentCol){
                if (movement == 'A') {
                    room[i][j] = "ᗤ";
                    
                    
                }
                else if(movement == 'S'){
                    room[i][j] = "ᗣ";
                    if(i == row - 2 && j == col - 2){
                        gameWon = true;
                    }
                }
                else if(movement == 'W'){
                    room[i][j] = "ᗢ";
                    
                }
                else{
                    room[i][j] = "ᗧ";
                }
                if(i == row - 2 && j == col - 2){
                    gameWon = true;
                }
                
            }
            
            
            else if(i == 0){
                room [i][j] = "-";
            }
            else if(j == col-1){
                room[i][j] = "|";
            }
            else if(i == row-1){
                room[i][j] = "-";
            }
            else if(j == 0){
                room[i][j] = "|";
            }
            else{
                room[i][j] = ".";
            }
            
            
            cout << room[i][j];
            if(gameWon == true){
                cout << "\nGAME WON!" << endl;
                exit(0);
            }
            
            
        }
        cout << "\n";
    }
    
    
    
}


void drawPlayer(){
    
    if(startOfGame == true){
        currentRow = 1;
        currentCol = 1;
        startOfGame = false;
    }
    else{
        cin.sync();
        cin >> movement;
        cin.ignore();
        
        //In this blocks, I use validMove to confirm the call of drawRoom().
        //If the player is trying to get out of the borders, validMove is set to false and we replace the player to its initial position before the move.
        //I am conscious that deleting the validMove part as such would work too: (e.g.: movement = S)
        /* if(currentRow > row - 1){
         currentRow = currentRow - 1;
         }
         */
        //However, it would still call drawRoom() even if it doesn't display the move. drawRoom() is a fct running in O(n^2) and for efficiency purposes, it's better to check if we can avoid calling it.
        
        if(movement == 'S'){
            currentRow = currentRow + 1;
            if(currentRow < row - 1){
                validMove = true;
            }
            else{
                validMove = false;
                currentRow = currentRow - 1;
            }
        }
        else if(movement == 'W'){
            currentRow = currentRow - 1;
            if(currentRow > 0){
                validMove = true;
            }
            else{
                validMove = false;
                currentRow = currentRow + 1;
            }
        }
        else if(movement == 'D'){
            currentCol = currentCol + 1;
            if(currentCol < col - 1){
                validMove = true;
            }
            else{
                validMove = false;
                currentCol = currentCol - 1;
            }
        }
        else if(movement == 'A'){
            currentCol = currentCol - 1;
            if(currentCol > 0){
                validMove = true;
            }
            else{
                validMove = false;
                currentCol = currentCol +1;
            }
        }
        
    }
    
    room[currentCol][currentRow] = "ᗤ";
    
    if(validMove == true){
        drawRoom();
    }
    
}


void checkTrap(){
    
    srand(time(NULL));
    
    //Print position of current trap.
//    randomTrapGeneratorRow = rand() % row + 1;
//    randomTrapGeneratorCol = rand() % col + 1;
//    randomMonsterGeneratorRow = rand() % row + 1;
//    randomMonsterGeneratorCol = rand() % col + 1;
//
//    cout << "TRAP GENERATOR ROW : " << randomTrapGeneratorRow << endl;
//    cout << "TRAP GENERATOR COL : " << randomTrapGeneratorCol << endl;
//    cout << "MONSTA GENERATOR ROW : " << randomMonsterGeneratorRow << endl;
//    cout << "MONSTAR GENERATOR COL : " << randomMonsterGeneratorCol << endl;


    
    if (currentRow % randomTrapGeneratorRow == 0 || currentCol % randomTrapGeneratorCol == 0){
        cout << "TRAP DETECTED" << endl;
    }
    
}

